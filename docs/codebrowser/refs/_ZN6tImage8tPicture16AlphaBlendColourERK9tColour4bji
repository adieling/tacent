<dec f='Modules/Image/Inc/Image/tPicture.h' l='182' type='void tImage::tPicture::AlphaBlendColour(const tColour4b &amp; blendColour, comp_t  = tCompBit_RGB, int finalAlpha = 255)'/>
<def f='Modules/Image/Inc/Image/tPicture.h' l='619' ll='642' type='void tImage::tPicture::AlphaBlendColour(const tColour4b &amp; blend, comp_t channels = tCompBit_RGB, int finalAlpha = 255)'/>
<doc f='Modules/Image/Inc/Image/tPicture.h' l='171'>// Blends blendColour (background) into the RGB channels specified (usually RGB, but any combination of the 3 is
	// allowed) using the pixel alpha to modulate. The new pixel colour is alpha*component + (1-alpha)*blend_component.
	//
	// Eg. If pixel alpha is 255, then none of the blend colour is used for that pixel. If alpha is 0, all of it is
	// used. If alpha is 64, then 1/4 of the current pixel colour and 3/4 of the supplied,
	//
	// FinalAlpha should be in [-1, 255]. If finalAlpha is &gt;= 0 then the alpha will be set to finalAlpha after the blend
	// is complete. If finalAlpha is -1, the alpha is left unmodified. By default the finalAlpha is 255 (opaque) which
	// means the operation essentially creates a premultiplied-alpha opaque image.
	// Note that the alpha of the supplied colour is ignored (since we use finalAlpha).
	// Note that unspecified RGB channels are keft unmodified.</doc>
