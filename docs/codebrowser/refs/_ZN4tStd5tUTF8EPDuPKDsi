<dec f='Modules/Foundation/Inc/Foundation/tStandard.h' l='274' type='int tStd::tUTF8(char8_t * dst, const char16_t * src, int srcLen)'/>
<doc f='Modules/Foundation/Inc/Foundation/tStandard.h' l='261'>// These functions convert to/from the 3 main unicode encodings. Note that most text in Tacent is
// assumed to be UTF-8. These are provided so external or OS-specific calls can be made when they expect non-UTF-8
// input, and when results are supplied, converted back to UTF-8.
//
// Null termination is not part of UTF encoding. These work on arrays of code-units (charN types). Not null terminated.
// 1) If (only) dst is nullptr, returns the exact number of code-units (charNs) needed for dst.
// 2) If src is nullptr, dst is ignored and srcLen is used to return a fast, worst-case number of codeunits (charNs)
//    needed for dst assuming no overlong encoding. This second method is fast because the contents of src are not
//    inspected, but it often gives conservative (larger) results.
// 3) If all args are valid, converts the UTFn src data to the dst UTFn encoding. Returns the number of dst codeunits
//    (charNs) written.
// Caller is responsibe for making sure dst is big enough! srcLen is not the number of code-points, it is the number of
// code-units (charNs) provided by the src pointer.</doc>
<doc f='Modules/Foundation/Inc/Foundation/tStandard.h' l='274'>// UFT-16 to UTF-8.</doc>
<use f='Modules/Foundation/Inc/Foundation/tName.h' l='540' u='c' c='_ZN5tName8SetUTF16EPKDsi'/>
<use f='Modules/Foundation/Inc/Foundation/tName.h' l='543' u='c' c='_ZN5tName8SetUTF16EPKDsi'/>
<def f='Modules/Foundation/Src/tStandard.cpp' l='361' ll='394' type='int tStd::tUTF8(char8_t * dst, const char16_t * src, int srcLen)'/>
<use f='Modules/Foundation/Src/tStandard.cpp' l='553' u='c' c='_ZN4tStd6tUTF8sEPDuPKDs'/>
<use f='Modules/Foundation/Src/tString.cpp' l='657' u='c' c='_ZN7tString8SetUTF16EPKDsi'/>
<use f='Modules/Foundation/Src/tString.cpp' l='659' u='c' c='_ZN7tString8SetUTF16EPKDsi'/>
